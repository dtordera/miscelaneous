package shipmodel;

import java.util.Arrays;

import comu.BSPuzzle;
import comu.K;
import comu.Mostrades;

public class Resoledor extends BSPuzzle {

	Vaixell[] B;
	Vaixell[] T;
	byte[] SRb;
	byte[] SCb;
	public Vaixell[][] S;	
	public long tr;
	boolean preparat;

	public Resoledor(BSPuzzle P){
		super(P);
		preparat = false;
	}
	
	public Resoledor M(Mostrades[] m){
		M = new Mostrades[m.length];
		System.arraycopy(m,0,M,0,m.length);
		
		preparat = false;
		
		return this;
	}
	
	void ResetS(){S = new Vaixell[0][0];}	
	void ResetT(){T = new Vaixell[Ls.length];}	
	void ResetB(){B = new Vaixell[Ls.length];for (byte n=0;n<Ls.length;n++) B[n]=new Vaixell(Ls[n]);}
	
	void BackupSumes(){
		SRb = SR.clone();
		SCb = SC.clone();
	}
	
	void RestoreSumes(){
		SR = SRb.clone();
		SC = SCb.clone();
	}
	
	public long prepara(){			
				
		ResetB();
		PosiblesxSumes();	
		EliminaxAigua();
		TrobaSubmarins();
		TreuVaixellsTrobats();
		
		preparat = true;		
		
		return NCombinacions();
	}
	
	public long NCombinacions(){		
	
		long r=B==null||B.length==0?0:1;
				
		for (Vaixell v:B)
			r*=v.ps.quantitat();
			
		return r;
	}	
		
	public int Resol(int maxS){
	
		tr = System.currentTimeMillis();	
			
		if (!preparat) prepara();
							
		ResetS();
		ResetT();
		
		BackupSumes();
		SolucionsPosibles(0,maxS);		
		RestoreSumes();
		
		tr = System.currentTimeMillis()-tr;
		
		return S.length;								
	}	
	
	void InclouASumes(int idx){
		byte i,j;
	
		for (i=T[idx].r().x;i<T[idx].rf().x;i++)
		for (j=T[idx].r().y;j<T[idx].rf().y;j++)
		{
			SR[i]--;
			SC[j]--;
		}
	}
	
	void RestaDeSumes(int idx){
		byte i,j;
		
		for (i=T[idx].r().x;i<T[idx].rf().x;i++)
		for (j=T[idx].r().y;j<T[idx].rf().y;j++)
		{
			SR[i]++;
			SC[j]++;
		}		
	}	
	
	void SolucionsPosibles(int idx,int maxS){
	
		if (maxS!=0&&S.length>=maxS) return;		
		
		for (Posicio p:B[idx].ps.P) {
			T[idx] = new Vaixell(B[idx].L,p);					
			
			if (ComprobaCombinacio(idx))			
			{												
				if (idx+1==B.length)
				{						
					if (SolucioNoInclosa()){//&&CorrecteAmbM()){//&&SolucioNoInclosa()){
									
						S = Arrays.copyOf(S,S.length+1);
									
						S[S.length-1] = new Vaixell[T.length];
						System.arraycopy(T,0,S[S.length-1],0,T.length);
					}
				}
				else										
					SolucionsPosibles((idx+1),maxS);
			}
		}						
		
		T[idx]=null;		
	}
	
	public boolean SolucioNoInclosa(){
		
		byte L = 0;
		
		for (Vaixell v:T)
		if (v!=null)
		L = v.L>L?v.L:L;
				
		Posicions[] pc = new Posicions[L];
		
		for (byte n=L;n!=0;n--) pc[n-1] = new Posicions();
		
		for (Vaixell v:T)
		if (v!=null)
			pc[v.L-1].add(v.ps.r());
		
		for (Vaixell[] s:S){			
				
			Posicions[] ps = new Posicions[L];
			
			for (int n=0;n<ps.length;n++) ps[n] = new Posicions();
		
			for (Vaixell v:s)
			if (v!=null)
				ps[v.L-1].add(v.ps.P);
				
			if (IgualCombinacio(pc,ps)) return false;
		}
								
		return true;
	}
		
	public boolean IgualCombinacio(Posicions[] p1,Posicions[] p2){
		boolean r = true;
		
		for (int n=p1.length;n!=0;n--)
			r &= p1[n-1].mateixoselements(p2[n-1]); 		
		
		return r;
	}		
	
	public boolean ComprobaCombinacio(int idx){
		
		return CheckejaSumes()&&CheckejaM(idx)&&!CheckejaChocs(idx);
	}	
	
	public void TreuVaixellsTrobats(){
		byte i,j;
	
		for (Vaixell v:B)
			if (v.r()!=null)
			{
				for (j=v.r().y;j<v.rf().y;j++)
				for (i=v.r().x;i<v.rf().x;i++)
				for (Vaixell l:B)
					if (l!=v)
					l.ps.treu(i,j,l.L);
			}
	}
		
	public boolean CheckejaSumes(){
		
		byte[] SRs,SCs;
		byte i,j;
		boolean r = true;
		
//		long t = System.currentTimeMillis();		
		
		SRs = SRb.clone();
		SCs = SCb.clone();
	
		byte n=0;
		byte L=(byte)T.length;
		
		while(n<L&&T[n]!=null)
		{
			for (i=T[n].r().x;i<=T[n].rf().x;i++)		
			for (j=T[n].r().y;j<=T[n].rf().y;j++)		
			{
				SRs[i]--;
				SCs[j]--;
			}	
			
			n++;				
		}
		
		for (i=0;i<C;i++)
		r&=!(SRs[i]<0);
		
		for (j=0;j<R;j++)
		r&=!(SCs[j]<0);
		
//		System.out.println("CheckejaSumes : " + (System.currentTimeMillis()-t));
		
		return r;
	}
	
	public boolean CheckejaChocs(int idx){
		boolean r = false;
		
		byte n=0;		
		while(n<idx)r|=T[n++].choca(T[idx]);
		
		return r;	
	}	
	
	public boolean CheckejaChocs(){
		boolean r = false;
		
		int L = T.length;
		
		byte n=0,m;
		
		while(n<L&&T[n]!=null){
			m=0;
			while(m<L&&T[m]!=null){
				if (n!=m) r|=T[n].choca(T[m]);
				m++;
			}
			n++;
	   }		
		
		return r;	
	}
	
	public boolean CheckejaM(int idx){
	
		boolean r=true;
		char c;
	
		for (Mostrades m:M)
			if (m.v!=K.I) 
			{
				c = T[idx].c(m.x,m.y);
				r &= c==K.I||c==m.v;
			}
						
		return r;
	}
	public boolean CheckejaM(){
	
		boolean r=true;
		byte n;
		char c;
	
		for (Mostrades m:M)
			if (m.v!=K.I) 
			{
				n=0;
				while(n<T.length&&T[n]!=null) {
					c = T[n].c(m.x,m.y);
					r &= c==K.I||c==m.v;
					n++;
				}
			}
						
		return r;
	}
	
	public char c(byte i,byte j){
	
		char k;
	
		byte n=0;		
		while(n<T.length&&T[n]!=null){
			k = T[n].c(i,j);
			if (k!=K.I&&k!=K.A) return k;
			n++;
		}
		
		return K.A;
	}			
	
	public boolean CorrecteAmbM(){
				
		for (Mostrades m:M)
			if (m.v!=K.I&&c(m.x,m.y)!=m.v) return false;
				
		return true;
	}		
				
	public void TrobaSubmarins(){
		for (Mostrades m:M)	
			if (m.v==K.B) 			
			for (Vaixell v:B) {

				if (v.r()!=null) continue;				
					
				if (v.L==1){
					v.ps.reset();
					v.ps.add(m.x,m.y,K.HOR);
								
					break;
				}
			}		
	}
	
	void RestaMostradesDeSumes(){
		for (Mostrades m:M)
		if (m.v!=K.I&&m.v!=K.A) { SR[m.x]--; SR[m.y]--;}
	}
		
	void PosiblesxSumes(){
	
		byte i,j,k,m;
		boolean z;
		
		for (j=0;j<R;j++)
		for (i=0;i<C;i++)
		for (Vaixell v:B)
		{			
			if (v.L<=SC[j]&&i+v.L-1<C)
			{
				z=false;
				for (k=i;k<i+v.L;k++) z|=SR[k]==0;
				
				if (!z)
				v.ps.add(i,j,K.HOR);
			}
			
			if (v.L!=1&&v.L<=SR[i]&&j+v.L-1<R) 
			{
				z=false;
				for (m=j;m<j+v.L;m++) z|=SC[m]==0;
				
				if (!z)
				v.ps.add(i,j,K.VER);
			}
		}		
	}
	
	public void EliminaxAigua(){
	
		for (Mostrades m:M){
			switch(m.v){
			case K.I : break;
			case K.A : for (Vaixell v:B) v.ps.treu(m.x,m.y,v.L); break;
			case K.B : for (Vaixell v:B) {
							v.ps.treu(m.x-1,m.y-1,v.L);
							v.ps.treu(m.x,m.y-1,v.L);
							v.ps.treu(m.x+1,m.y-1,v.L);
							v.ps.treu(m.x-1,m.y,v.L);
							v.ps.treu(m.x+1,m.y,v.L);
							v.ps.treu(m.x-1,m.y+1,v.L);
							v.ps.treu(m.x+1,m.y+1,v.L);
							if (v.L!=1) v.ps.remove(m.x,m.y);
						}
						break;
			case K.N : for (Vaixell v:B) {
							v.ps.treu(m.x-1,m.y-1,v.L);
							v.ps.treu(m.x,m.y-1,v.L);
							v.ps.treu(m.x+1,m.y-1,v.L);
							v.ps.treu(m.x-1,m.y,v.L);
							v.ps.treu(m.x+1,m.y,v.L);
							v.ps.treu(m.x-1,m.y+1,v.L);
							v.ps.treu(m.x+1,m.y+1,v.L);
							v.ps.treu(m.x-1,m.y+2,v.L);
							v.ps.treu(m.x+1,m.y+2,v.L);
							v.ps.remove(m.x,m.y+1);
						}break;
			case K.S : for (Vaixell v:B) {
							v.ps.treu(m.x-1,m.y+1,v.L);
							v.ps.treu(m.x,m.y+1,v.L);
							v.ps.treu(m.x+1,m.y+1,v.L);
							v.ps.treu(m.x-1,m.y,v.L);
							v.ps.treu(m.x+1,m.y,v.L);
							v.ps.treu(m.x-1,m.y-1,v.L);
							v.ps.treu(m.x+1,m.y-1,v.L);
							v.ps.treu(m.x-1,m.y-2,v.L);
							v.ps.treu(m.x+1,m.y-2,v.L);		
						}break;
			case K.O : for (Vaixell v:B) {
							v.ps.treu(m.x-1,m.y-1,v.L);
							v.ps.treu(m.x-1,m.y,v.L);
							v.ps.treu(m.x-1,m.y+1,v.L);
							v.ps.treu(m.x,m.y-1,v.L);
							v.ps.treu(m.x,m.y+1,v.L);
							v.ps.treu(m.x+1,m.y-1,v.L);
							v.ps.treu(m.x+1,m.y+1,v.L);
							v.ps.treu(m.x+2,m.y-1,v.L);
							v.ps.treu(m.x+2,m.y+1,v.L);
							v.ps.remove(m.x+1,m.y);						
						}break;
			case K.E : for (Vaixell v:B) {
							v.ps.treu(m.x+1,m.y-1,v.L);
							v.ps.treu(m.x+1,m.y,v.L);
							v.ps.treu(m.x+1,m.y+1,v.L);
							v.ps.treu(m.x,m.y-1,v.L);
							v.ps.treu(m.x,m.y+1,v.L);
							v.ps.treu(m.x-1,m.y-1,v.L);
							v.ps.treu(m.x-1,m.y+1,v.L);
							v.ps.treu(m.x-2,m.y-1,v.L);
							v.ps.treu(m.x-2,m.y+1,v.L);
					
						}break;
			default : for (Vaixell v:B) {
			
							v.ps.remove(m.x,m.y);
			
							v.ps.treu(m.x-1,m.y-1,v.L);
							v.ps.treu(m.x+1,m.y-1,v.L);
							v.ps.treu(m.x-1,m.y+1,v.L);
							v.ps.treu(m.x+1,m.y+1,v.L);
							
							if (v.L<3) 
							{
								v.ps.treu(m.x-1,m.y,v.L);
								v.ps.treu(m.x+1,m.y,v.L);
								v.ps.treu(m.x,m.y-1,v.L);
								v.ps.treu(m.x,m.y+1,v.L);
							}
						}						
			}
		}			
	}		
}
