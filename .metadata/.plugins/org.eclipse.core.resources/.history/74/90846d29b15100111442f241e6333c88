package dvtr.logicgames.yubotu;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;

public class Puzzle {

	public byte C,R;	
	public Vaixell[] B;	
	private byte G[][];
	
	private int dificultat = 0;
	
	public int[] SR,SC;	
	private CI[] I;
	
	public Puzzle(int[]sr,int[]sc,CI[] i,int[] b){SR=sr.clone();SC=sc.clone();C=(byte) sr.length;R=(byte) sc.length;I=Arrays.copyOf(i,i.length);G=novaGrid(C,R);
	PosaInicials();B=new Vaixell[b.length];for (int n=0;n<b.length;n++)B[n]=new Vaixell(b[n]);}	
	
	public Puzzle(Puzzle P){
		C = P.C;
		R = P.R;
		B = Arrays.copyOf(P.B,P.B.length);
		SR = P.SR.clone();
		SC = P.SC.clone();
		
		G = novaGrid(C,R);
		
		for (int j=0;j<R;j++)
		for (int i=0;i<C;i++)
		G[i][j] = P.G[i][j];
		
		dificultat = P.dificultat;
	}
	
	
	public boolean equals(Puzzle P){
		boolean r=true;

		for (int i=0;i<SR.length;i++)
		r &= SR[i]==P.SR[i];
				
		for (int j=0;j<SC.length;j++)
		r &= SC[j]==P.SC[j];		
		
		for (int j=0;j<R;j++)
		for (int i=0;i<C;i++)
			r&=G[i][j]==P.G[i][j];
				
		return r;
	}
	public byte[][] novaGrid(int C,int R){
		byte[][]g = new byte[C][R];
		
		for (int i=0;i<C;i++)
		{
			g[i] = new byte[R];
			Arrays.fill(g[i],K.I);
		}		
		
		return g;
	}
	
	public Puzzle(int c,int r){
		C = (byte)c;
		R = (byte)r;
		
		SR=new int[C];
		SC=new int[R];
		
		B = new Vaixell[0];
			
		G = novaGrid(C,R);
	}
	
	public boolean Coloca(int []b){
		
		Vaixell[] V = new Vaixell[b.length];
		
		for (int n=0;n<b.length;n++)
			V[n] = new Vaixell(b[n]);		
		
		ArrayList<Index>I=new ArrayList<Index>();
		
		for (int j=0;j<R;j++)
		for (int i=0;i<C;i++)
		I.add(new Index(i,j));
											
		Collections.shuffle(I);
											
		return Coloca(V,I);
	}
	
	public boolean Coloca(Vaixell[] V,ArrayList<Index> I){
	
		if (V.length==0) return true;
		if (I.size()==0) return false;
	
		Collections.shuffle(I);
						
		for (Index i:I)
			if (Coloca(V[0],i)) return Coloca(Arrays.copyOfRange(V,1,V.length),I);
			
		return false;
	}
	
	public boolean ColocaH(Vaixell V,Index i){
		boolean r=true;
		Index E=i;
		
		for (int n=0;n<V.L;n++) {r&=i(E);E=E.E();}
		
		E=i;
		
		if (r) { 
			for(int n=0;n<V.L;n++) {
				det(E,V.L==1?K.B:n==0?K.O:n==V.L-1?K.E:K.X);
				E=E.E();
			} 
			PatronsAigua();
		}
		
		return r;
	}
	
	public boolean ColocaV(Vaixell V,Index i){
		boolean r=true;
		Index S=i;
		
		for (int n=0;n<V.L;n++){r&=i(S);S=S.S();}
		
		S=i;
		
		if (r) { 
			for(int n=0;n<V.L;n++) {
				det(S,V.L==1?K.B:n==0?K.N:n==V.L-1?K.S:K.X);
				S=S.S();
			} 
			PatronsAigua();
		}		
		
		return r;
	}
	
	public boolean Coloca(Vaixell V,Index i){				
		return ColocaH(V,i)||ColocaV(V,i);
	}
		
	public byte v(int x,int y){if(x<0||x>=C||y<0||y>=R) return K.A; return G[x][y];}
	public byte v(Index i){return v(i.x,i.y);}
	
	public boolean s(int x,int y){if(x<0||x>=C||y<0||y>=R) return false;return v(x,y)>K.A;}
	public boolean s(Index i){return s(i.x,i.y);}
	
	public boolean i(int x,int y){if(x<0||x>=C||y<0||y>=R) return false;return v(x,y)==K.I;}
	public boolean i(Index i){return i(i.x,i.y);}
	
	public boolean d(int x,int y){if(x<0||x>=C||y<0||y>=R) return true;return v(x,y)==K.A||v(x,y)>K.M;}
	public boolean d(Index i){return d(i.x,i.y);}
	
	public String r(int x,int y){if(x<0||x>=C||y<0||y>=R) return "Â·";return ""+K.REPR[v(x,y)+1];}
	public String r(Index i){return r(i.x,i.y);}
	
	public void reset(int x,int y){G[x][y]=K.I;}
	
	public void PosaInicials(){for (int n=0;n<I.length;n++) det(I[n].i,I[n].v);}
	public int SC(int j){int r=0;for(int i=0;i<C;i++)if(s(i,j))r++;return r;}
	public int SR(int i){int r=0;for(int j=0;j<R;j++)if(s(i,j))r++;return r;}
	public int IC(int j){int r=0;for(int i=0;i<C;i++)if(i(i,j))r++;return r;}
	public int IR(int i){int r=0;for(int j=0;j<R;j++)if(i(i,j))r++;return r;}
		
	public String toString(){String r="";for(int j=0;j<R;j++){for(int i=0;i<C;i++)r+=r(i,j)+" ";r+=" " + SC[j]+" "+SC(j)+" "+IC(j)+"\n";
	}r+="\n";for(int i=0;i<C;i++)r+=SR[i]+" ";r+="\n";for(int i=0;i<C;i++)r+=SR(i)+" ";r+="\n";for(int i=0;i<C;i++)r+=IR(i)+" ";r+="\n";return r+"\n";}
//	for (int i=0;i<B.length;i++)r+="\n"+B[i].toString() + " " + (B[i].det()?"("+B[i].ro.x+","+B[i].ro.y+")("+B[i].rf.x+","+B[i].rf.y+")":"");return r+"\n";}
	
	public boolean A(int x,int y){return det(x,y,K.A);}
	public boolean A(Index i)	{return det(i.x,i.y,K.A);}
	public boolean A(Index...I) {boolean r=true;for(Index i:I)r&=det(i.x,i.y,K.A); return r;}
	
	public boolean M(int x,int y){return det(x,y,K.M);}	
	
	public boolean mV(Index i,byte v){return d(i)&&v(i)==v;}
	public boolean mM(Index i){return v(i)==K.M;}
	public boolean mA(Index i){return mV(i,K.A);}
	public boolean mX(Index i){return mV(i,K.X);}
	public boolean mN(Index i){return mV(i,K.N);}
	public boolean mS(Index i){return mV(i,K.S);}
	public boolean mE(Index i){return mV(i,K.E);}
	public boolean mO(Index i){return mV(i,K.O);}
	public boolean mB(Index i){return mV(i,K.B);}
	public boolean mA(Index...I){boolean r=true;for(Index i:I)r&=mA(i);return r;}
							
	public boolean det(Index i,byte v){return det(i.x,i.y,v);}
	public boolean det(int x,int y,byte v){
		
		if (v(x,y)>=v||d(x,y)) return false;	

		G[x][y] = v;
		return true;
	}
	
	public boolean PatronsAigua() {
		
		boolean r = false;	
			
		for (int y=0;y<R;y++)
		for (int x=0;x<C;x++)
		{
			Index I=new Index(x,y),N=I.N(),S=I.S(),E=I.E(),O=I.O(),SO=I.SO(),NO=I.NO(),SE=I.SE(),NE=I.NE();
			
			switch(v(x,y)){ 
			case K.X :  
			case K.M : r|=A(NO,NE,SO,SE); break;
			case K.B : r|=A(NO,N,NE,O,E,SO,S,SE);break;
			case K.N : r|=A(NO,N,NE,O,E,SO,SE,SO.S(),SE.S()); break;
			case K.S : r|=A(SO,S,SE,O,E,NO,NE,NO.N(),NE.N()); break;
			case K.O : r|=A(NO,N,NE,NE.E(),O,SO,S,SE,SE.E()); break;
			case K.E : r|=A(NO.O(),NO,N,NE,E,SO.O(),SO,S,SE); break;
			}		
		}
		return r;
	}
	
	public boolean AiguaxSumes(){
		boolean r = false;
		
		for (int j=0;j<R;j++)
		for (int i=0;i<C;i++)
			if ((SR[i]==0)||(SC[j]==0)) r|=A(i,j);

		for (int j=0;j<R;j++)
		for (int i=0;i<C;i++)
			if (SR[i]==SR(i)||SC[j]==SC(j)) r|=A(i,j);
					
		return r;
	}
	
	public boolean Solidsxindeterminats(){
		boolean r = false;
		
		for (int j=0;j<R;j++)
		for (int i=0;i<C;i++)
			if(SR[i]-SR(i)==IR(i)||SC[j]-SC(j)==IC(j)) r|=det(i,j,K.M);
		
		return r;
	}
	
	public boolean MarcaSolid(){
		boolean r = false;
		boolean M;
		
		for (int j=0;j<R;j++)
		for (int i=0;i<C;i++)
		{		
			Index I=new Index(i,j),N=I.N(),S=I.S(),E=I.E(),O=I.O();		
			
			M = mS(S)||mN(N)||mE(E)||mO(O);
			
			M |= mX(E)&&(mA(E.N())||mA(E.S()));
			M |= mX(O)&&(mA(O.N())||mA(O.S()));
			M |= mX(N)&&(mA(N.O())||mA(N.E()));
			M |= mX(S)&&(mA(S.O())||mA(S.E()));
			
			if (M) r=det(I,K.M);			
		}
		
		return r;
	}
	
	public boolean MarcaExtrems(){
		boolean r=false;
		
		for (int j=0;j<R;j++)
		for (int i=0;i<C;i++)
		{
			Index I=new Index(i,j),N=I.N(),S=I.S(),E=I.E(),O=I.O();		
									
			if (!mM(I)) continue;		
			
			if (mA(N.O(),N,N.E(),E,O,S.O(),S,S.E())) r|=det(I,K.B);
			
			if ((mS(S)||mM(S)||mX(S))&&mA(O,E,N)) r|=det(I,K.N);
			if ((mN(N)||mM(N)||mX(N))&&mA(O,E,S)) r|=det(I,K.S);
			if ((mE(E)||mM(E)||mX(E))&&mA(N,S,O)) r|=det(I,K.O);
			if ((mO(O)||mM(O)||mX(O))&&mA(N,S,E)) r|=det(I,K.E);
						
			if (s(S)&&s(N)) r|=det(I,K.X);
			if (s(E)&&s(O)) r|=det(I,K.X);
		}
		
		return r;
	}
		
	public boolean HadeserAigua(){
		boolean r=false;
		
		for (int j=0;j<R;j++)
		for (int i=0;i<C;i++)
		{
			boolean nps = false;
			int NO,SO,NE,SE;
			Index I = new Index(i,j);
			
			NO=i(I.NO())?1:0;
			SO=i(I.SO())?1:0;
			NE=i(I.NE())?1:0;
			SE=i(I.SE())?1:0;						
						
			nps|=(NO==1||SO==1)&&(IR(i-1)-NO-SO<SR[i-1]-SR(i-1));
			nps|=(NE==1||SE==1)&&(IR(i+1)-NE-SE<SR[i+1]-SR(i+1));
			nps|=(NO==1||NE==1)&&(IC(j-1)-NO-NE<SC[j-1]-SC(j-1));
			nps|=(SO==1||SE==1)&&(IC(j+1)-SO-SE<SC[j+1]-SC(j+1));
			
			if (nps) r|=A(I);						
		}		
		return r;		
	}		
	
	public boolean TotesDeterminades(){
		for(int j=0;j<R;j++)
		for(int i=0;i<C;i++)
			if (v(i,j)==K.I||v(i,j)==K.M) return false;
			
		return true;
	}
	
	public boolean RestaVaixells(){
		boolean r = false;
	
		for (int n=0;n<B.length;n++)
		{B[n].ro.x=-1;B[n].ro.y=-1;B[n].rf.x=-1;B[n].rf.y=-1;}
	
		for (int j=0;j<R;j++)
		for (int i=0;i<C;i++)
		{
			Index I = new Index(i,j);
			
			if (mB(I))
			{
				for(int n=0;n<B.length;n++) 
				if((B[n].L==K.SUB)&&(!B[n].det())){
					B[n].ro=I;
					B[n].rf=I; 
					break;
				}
			}
			else 
			if (mN(I))
			{
				Index S=I;
				while(s(S)) S=S.S();
				
				if (mS(S.N())) for (int n=0;n<B.length;n++) if ((B[n].L==S.y-I.y)&&(!B[n].det())){B[n].ro=I;B[n].rf=S.N();break;}			
			}				
			else
			if (mO(I))
			{
				Index E=I;
				while(s(E)) E=E.E();
				
				if (mE(E.O())) for (int n=0;n<B.length;n++) if ((B[n].L==E.x-I.x)&&(!B[n].det())){B[n].ro=I;B[n].rf=E.O();break;}				
			}								
		}					
		return r;
	}
		
	public boolean Coherent(){
		boolean r = true;
		
		for (int i=0;i<C;i++)r&=SR(i)<=SR[i];		
		for (int j=0;j<R;j++)r&=SC(j)<=SC[j];
			
		return r;				
	}
	
	public boolean SumesResoltes(){
		boolean r = true;
		
		for(int i=0;i<C;i++)r&=SR(i)==SR[i];
		for(int j=0;j<R;j++)r&=SC(j)==SC[j];
		
		return r;
	}
	
	public boolean Resolt(){
		return TotesDeterminades()&&SumesResoltes()&&TotsVaixellsTrobats();
	}
	
	public boolean TotsVaixellsTrobats(){
		return VaixellsTrobats() == B.length;
	}
	
	public int VaixellsTrobats(){
		int r=0;
		for(int n=0;n<B.length;n++)
			r+=B[n].det()?1:0;
			
		return r;
	}	
					
	public Puzzle ResolRecursivament(Puzzle P)
	{		
		if (!P.Coherent()) return null;
		if (P.VaixellsTrobats() > P.B.length) return null;
										
		if (P.TotesDeterminades() && !P.SumesResoltes()) return null;
		
		Puzzle Ret = new Puzzle(P);		
		
		boolean falta = true;							
		
		int[] N={0,1,2,3,4,5};
		
		while (falta)
		{
			Collections.shuffle(Arrays.asList(N));

			falta=false;				
			
			for (int v:N)
			switch(v){
			case 0: falta|=Ret.PatronsAigua();break;
			case 1: falta|=Ret.AiguaxSumes();break;
			case 2: falta|=Ret.Solidsxindeterminats();break;
			case 3: falta|=Ret.MarcaSolid();break;
			case 4: falta|=Ret.HadeserAigua();break;
			case 5: falta|=Ret.xCapacitat();break;
			}						
			
			falta|=Ret.PatronsAigua();
			falta|=Ret.AiguaxSumes();
			falta|=Ret.Solidsxindeterminats();
			falta|=Ret.MarcaSolid();
			falta|=Ret.HadeserAigua();			
			falta|=Ret.xCapacitat();
			
			falta|=Ret.MarcaExtrems();
			falta|=Ret.RestaVaixells();
						
			System.out.println(Ret.toString());		
						
			if (Ret.TotesDeterminades()) falta = false;									
		}							
			
		Ret.dificultat++;
			
		for (int j=0;j<Ret.R;j++)
		for (int i=0;i<Ret.C;i++)
		{
			if (Ret.v(i,j) != K.I) continue;
												
			Ret.det(i,j,K.A);
			Ret = ResolRecursivament(Ret);
			if (Ret==null) {P.det(i,j,K.M); Ret = new Puzzle(P);}
		}
		
		if (Ret.Resolt()) return Ret;
		else return null;
		
//		return Ret;
	}
	
	public void PosaH(Index I,int l,int[][] g){
		
		boolean ok = true;
		
		Index m = I;
		
		int s = 0;
		
		for (int n=0;n<l&&ok;n++)
		{
			ok &= !mA(m);
			s += s(m)?1:0;
			m = m.E();
		}
		
		ok &= SC(I.y)+(l-s)<=SC[I.y];
		
		if (ok)
		for (int n=0;n<l;n++)
			if (g[I.x+n][I.y]<l) g[I.x+n][I.y]=l;
	}
	
	public void PosaV(Index I,int l,int[][] g){
		
		boolean ok = true;
		
		Index m = I;
		
		int s = 0;
		
		for (int n=0;n<l&&ok;n++)
		{
			ok &= !mA(m);
			s += s(m)?1:0;
			m = m.S();
		}
		
		ok &= SR(I.x)+(l-s)<=SR[I.x];
		
		if (ok)
		for (int n=0;n<l;n++)			
			if (g[I.x][I.y+n]<l) g[I.x][I.y+n]=l;
	}		
	
	public boolean xCapacitat(){
		boolean r = false;
		
		int mL = 0;
		for (int n=0;n<B.length;n++)
		mL = !B[n].det()&&B[n].L>mL?B[n].L:mL;
		
		int[] Ls = new int[mL+1];
		
		for (int n=0;n<B.length;n++)
			if (!B[n].det())Ls[B[n].L]++;				
			
		int [][]g = new int[C][R];
		
		for (int i=0;i<C;i++)
		g[i] = new int[R];
						
		for (int n=1;n<mL+1;n++)
		for (int j=0;j<R;j++)
		for (int i=0;i<C;i++)
		{	
			Index I = new Index(i,j);		
		
			PosaH(I,n,g);
			PosaV(I,n,g);
		}
		
		for (int n=0;n<B.length;n++)
		if (B[n].det())
			if (B[n].L==1) g[B[n].ro.x][B[n].ro.y]=9;
			else
			if (B[n].rf.x > B[n].ro.x)
				for (int l=0;l<B[n].L;l++)
					g[B[n].ro.x+l][B[n].ro.y]=9;
			else
			if (B[n].rf.y>B[n].ro.y)
				for (int l=0;l<B[n].L;l++)
					g[B[n].ro.x][B[n].ro.y+l]=9;		
		
		int[] c = new int[mL+1];
		
		for(int j=0;j<R;j++)
		for(int i=0;i<C;i++)
		if (g[i][j]<9)
			c[g[i][j]]++;
			
		for (int l=2;l<c.length;l++)
			if (Ls[l]*l==c[l])								
				for (int j=0;j<R;j++)
				for (int i=0;i<C;i++)	
					if (g[i][j]!=9&&g[i][j]<l+1)
						det(i,j,K.M);				
					
		String s="";
		
		for (int j=0;j<R;j++)
		{
			for (int i=0;i<C;i++)
				s += (g[i][j])+" ";				

			s+="\n";
		}
		
		for (int i=0;i<c.length;i++)
			s+="L="+i+":"+c[i]+"\n";
			
		
		System.out.println(s);
				
		return r;
	}
		
	public Puzzle Resol(){
			
		Puzzle r = ResolRecursivament(this);
						
		return r;
	}
}
	