package shipmodel;

import comu.K;


public class Flota {
	
	byte C,R;
	byte[] SR;
	byte[] SC;
	
	Vaixell[] V;		
	Vaixell[][] S;
	
	public Flota(int c,int r,byte[] l){	
		C=(byte)c;
		R=(byte)r;
		
		SR = new byte[C];
		SC = new byte[R];		
		
		V = new Vaixell[l.length];
		
		for (byte n=0;n<l.length;n++)
		V[n] = new Vaixell(l[n]);				
	}	
	
	public Vaixell[][] CombinacionsPosibles(){
	
		Vaixell[] TP = null;
		byte[] 	  N;				
		N = CreaTaulaPosicions(TP);
		InclouPosicionsxSumes(TP); 	
		
		S = new Vaixell[0][0];
		
		BuscaCombinacions(new Vaixell[0],N,TP);
		
		return S;
	}
	
	public void BuscaCombinacions(Vaixell[] check,byte[] N,Vaixell[] Taula){
	
		
		
	} 
	
	public byte[] CreaTaulaPosicions(Vaixell[] TP){
	
		int mL=1;
		
		for (Vaixell v:V) mL = mL>v.L?mL:v.L;
		
		TP = new Vaixell[mL];
		
		for (byte n=0;n<mL;n++)
		TP[n] = new Vaixell(n);
		
		byte[] r= new byte[mL];
		
		for (Vaixell v:TP) r[v.L-1]++;
		
		return r;
	}
	
	public void InclouPosicionsxSumes(Vaixell[] TP){
	
		byte i,j,k,m;
		boolean z;
	
		for (j=0;j<R;j++)
		for (i=0;i<C;i++)
		for (Vaixell v:TP)
		{
			if (v.L<=SC[j]&&i+v.L-1<C)
			{
				z=false;
				for (k=i;k<i+v.L;k++) z|=SR[k]==0;
				
				if (!z)
				v.ps.add(i,j,K.HOR);
			}
			
			if (v.L<=SR[i]&&j+v.L-1<R) 
			{
				z=false;
				for (m=j;m<j+v.L;m++) z|=SC[m]==0;
				
				if (!z)
				v.ps.add(i,j,K.VER);
			}								
		}						
	
	}
	
	public void PosaVaixells(){
	
		boolean fet = false;
		byte i,j;				
					
		Posicions S = new Posicions(C,R),
		P;		
		
		for (Vaixell v:V) v.ps.neteja();
				
		while (!fet)
		{	
			P = S.Shuffle();
					
			for (Vaixell v:V) 								
				for (Posicio p:P.P)								
					if (DintreLimits(v,p)&&CheckejaChocs(v,V,p)) {
					
						v.ps = new Posicions(p);
						treuVaixell(v,P);						

						break;						
					}				
			
			fet = true;		
			
			for (Vaixell v:V)
				fet &= v.r()!=null;
		}		
			
		for (i=0;i<C;i++) SR[i]=0;
		for (j=0;j<R;j++) SC[j]=0;						
		
		for (Vaixell v:V)
			for (i=v.r().x;i<=v.rf().x;i++)		
			for (j=v.r().y;j<=v.rf().y;j++)		
			{
				SR[i]++;
				SC[j]++;
			}													
	}
	
	public char c(int i,int j){
		char k;
	
		for (Vaixell v:V){
			
			k = v.c((byte)i,(byte)j);
			if (k!=K.I&&k!=K.A) return k;
		}
		
		return K.A;	
	}
	
	public String toString(){
		String s="";
		
		for (byte j=0;j<R;j++)
		{
			for (byte i=0;i<C;i++)
			{
				char m='Â·';
				
				for (Vaixell v:V)
					if (v.c(i,j)!=K.I) m=v.c(i,j);
					
				s+=m+" ";
			}
			s+=" " + SC[j] + "\n";
		}
		
		s+="\n";
		
		for (byte i=0;i<C;i++)
			s+=SR[i] + " ";
			
		return s;
	}
	
	public void treuVaixell(Vaixell v,Posicions P){
	
		if (v.r()==null) return;
		
		byte xo = (byte)(v.r().x-1),
			 yo = (byte)(v.r().y-1),
			 xf = (byte)(v.rf().x+1),
			 yf = (byte)(v.rf().y+1);
		
		for (byte i=xo;i<=xf;i++)
		for (byte j=yo;j<=yf;j++)
			P.remove(i,j);
	}
	
	public boolean DintreLimits(Vaixell v,Posicio p){
	
		return (p.x>=0&&p.J(v.L).x<C&&p.y>=0&&p.J(v.L).y<R);
	}
	
	public boolean CheckejaChocs(Vaixell v,Vaixell[] V,Posicio p){
		boolean r = true;
		
		Vaixell d= new Vaixell(v.L,p);
				
		for (Vaixell l:V)
			r&=!l.choca(d);
		
		return r;
	}
	
}
