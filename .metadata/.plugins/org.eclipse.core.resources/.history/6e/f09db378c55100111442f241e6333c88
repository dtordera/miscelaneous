package dvtr.logicgames.yubotu;

import java.util.Arrays;
import java.util.Random;

public class FactoriaPuzzle {
	int C,R;
	int[] B;
	int dificultat;
	
	public FactoriaPuzzle(int c,int r,int[] b, int Dif){
	C = c;
	R = r;
	
	dificultat = Dif;
	B = b.clone();		
	}
	
	public Puzzle Genera(){
		CI[] I = new CI[1];
		Random rnd = new Random();
		
		boolean Totfet = false;

		Puzzle P = new Puzzle(C,R);
		
		P.generant = true;
		
		long t = System.currentTimeMillis();
		
		while (!Totfet){
		
			P = new Puzzle(C,R);							
			if (!P.Coloca(B)) {System.out.println("Imposible colocar aquests vaixells");return null;}
				
			for (int j=0;j<P.R;j++)
				for (int i=0;i<P.C;i++)
					if (P.i(i,j)) P.A(i,j);
		
			for (int j=0;j<P.R;j++)
				P.SC[j] = P.SC(j);
			
			for (int i=0;i<P.C;i++)
				P.SR[i] = P.SR(i);
											
			boolean minimcelles = false;

			while(!minimcelles)
			{										
				int x = (Math.abs(rnd.nextInt()))%C;
				int y = (Math.abs(rnd.nextInt()))%R;
			
				I[I.length-1] = new CI(x,y,P.v(x,y));
				
				Puzzle R = new Puzzle(P.SR,P.SC,I,B).Resol();		
			
				minimcelles = R.equals(P);					
				if (!minimcelles) I = Arrays.copyOf(I,I.length+1);
			}		
			
			for (int i=0;i<I.length;i++)
			{
				if (I[i].v == K.A&&(P.SR[I[i].i.x]==0||P.SC[I[i].i.y]==0)) I[i] = new CI(-1,-1,K.A);			
						
				CI[] bak = Arrays.copyOf(I,I.length);
				
				I[i]=new CI(-1,-1,K.A);
				
				Puzzle R = new Puzzle(P.SR,P.SC,I,B).Resol();
				
				if (!R.equals(P)) I[i] = bak[i];
			}
			Totfet = true;
		}
		
		Puzzle R = new Puzzle(P.SR,P.SC,I,B);
		t = System.currentTimeMillis() - t;
		System.out.println("\nGenerat en "+t +"ms");
		System.out.println("\nSolucio original:\n"+P.toString());		
		
		return R;		
	}
}
