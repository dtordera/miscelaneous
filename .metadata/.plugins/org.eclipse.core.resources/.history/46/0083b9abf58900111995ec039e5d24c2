package dvtr.games.logic.BS10;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.SharedPreferences;
import android.content.res.Resources;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.os.SystemClock;
import android.view.View;
import android.widget.Button;
import android.widget.Chronometer;
import android.widget.LinearLayout;
import android.view.ViewGroup;

public class BS10GameActivity extends Activity{

	public static String[] BT_LABELS;
	BS10GameView V;
	Chronometer chrono;
	private ProgressDialog pd;

	SharedPreferences Settings;
	SharedPreferences.Editor SettingsEditor;

	@Override
	public void onCreate(Bundle savedInstanceState) {

		super.onCreate(savedInstanceState);

		Settings = getSharedPreferences(BS10Constants.prefName, 0);
		SettingsEditor = Settings.edit();

		setStrings();
		setContentView(R.layout.game);

		chrono = (Chronometer)findViewById(R.id.time);

		if (Settings.getBoolean("ST",true)) chrono.setVisibility(View.VISIBLE);
		else								chrono.setVisibility(View.INVISIBLE);

		V = new BS10GameView(this);
		AttachBSView();

		getWindow().getAttributes().format = android.graphics.PixelFormat.RGBA_8888;

		ResetChrono();

		SettingsEditor.putInt("CP",BS10Constants.BT_FILLCELL);
		SettingsEditor.commit();
		setgameCellPiece();
	}

	public void AttachBSView(){
		((ViewGroup)findViewById(R.id.Frame)).addView(V);
		V.drawThings();
	}

	@Override
	public void onResume(){
		super .onResume();

		setBackGround();
		setgameCellPiece();

		chrono.start();
	}

	@Override
	public void onStop(){
		chrono.stop();
		super .onStop();
	}

	public void setStrings(){

		BT_LABELS = new String[5];

		Resources res = getResources();

		BT_LABELS[BS10Constants.BT_FILLCELL] = res.getString(R.string.BT_FILLCELL);
		BT_LABELS[BS10Constants.BT_FILLCOL] = res.getString(R.string.BT_FILLCOL);
		BT_LABELS[BS10Constants.BT_FILLROW] = res.getString(R.string.BT_FILLROW);
	}

	public void setBackGround() {

		Resources res = getResources();
		Drawable d = res.getDrawable(R.drawable.menubkc);
		LinearLayout L = (LinearLayout)findViewById(R.id.gameLayout);

		switch (Settings.getInt("GS", BS10Constants.GS_CLASSIC)) {
		case BS10Constants.GS_CLASSIC:
			d = res.getDrawable(R.drawable.menubkc);
			break;
		case BS10Constants.GS_WWII:
			d = res.getDrawable(R.drawable.menubkw);
			break;
		case BS10Constants.GS_NOBMPS:
			d = res.getDrawable(R.drawable.menubkn);
			break;
		}

		L.setBackgroundDrawable(d);
	}

	public void gameCellPiece(View V){

		int d;

		switch(Settings.getInt("CP",BS10Constants.BT_FILLCELL)){
			case BS10Constants.BT_FILLCELL : d=BS10Constants.BT_FILLCOL; break;
			case BS10Constants.BT_FILLCOL : d=BS10Constants.BT_FILLROW; break;
			default : d=BS10Constants.BT_FILLCELL; break;
		}

		SettingsEditor.putInt("CP",d);
		SettingsEditor.commit();

		setgameCellPiece();
	}

	public void NewGameClick(View v){

   		V.NouPuzzle();

   		SettingsEditor.putInt("CP",BS10Constants.BT_FILLCELL);
   		SettingsEditor.commit();
   		setgameCellPiece();

   		//ResetChrono();
	}

	public void ResetChrono(){
		chrono.setBase(SystemClock.elapsedRealtime());
		chrono.start();
	}

	public void ResetGameClick(View v){
		V.ResetPuzzle();
	}

	public void SolveGameClick(View v){
		V.ResolPuzzle();
	}

	public void setgameCellPiece(){
		((Button)findViewById(R.id.btPosa)).setText(BT_LABELS[Settings.getInt("CP",BS10Constants.BT_FILLCELL)]);
	}
}
