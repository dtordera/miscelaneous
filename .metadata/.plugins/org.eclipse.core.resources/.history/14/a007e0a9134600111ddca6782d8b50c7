import java.util.Arrays;
import java.util.Random;

public class Puzzle {
	public int 	mc,
				mr;
	public Vaixell[] v;
	public cella[]   c;
	public boolean resolved;
	int[] SR,SC;
		
	public Puzzle(int cl,int rw,Vaixell[] V,cella[] j,int[] SRo, int[] SCo){
		mc = cl;
		mr = rw;
		v  = Arrays.copyOf(V,V.length);
		c  = Arrays.copyOf(j,j.length);
		SR = Arrays.copyOf(SRo,SRo.length);
		SC = Arrays.copyOf(SCo,SCo.length);		
		resolved = false;
	}
	
	public boolean Resol() {
	
/*		boolean ret = false;		
		char[][] G = new char[mc][mr]; // grid			
		
		Indexs p = new Indexs(mc,mr);
		
		p.Shuffle();
			
		System.out.println("Eliminant inicis ja establerts...");
		for (int i=0;i<c.length;i++) 
			switch(c[i].v) {
				case k.B_ : for (int n=0;n<v.length;n++)
							if ((v[n].l == k.SUB) && !v[n].fixat){
								v[n].i.x = c[i].i.x;
								v[n].i.y = c[i].i.y;
								v[n].fixat = true;															
							}			
				case k.A_:
				case k.P_: 
				case k.S_:
				case k.E_: p.Borra(c[i].i.x,c[i].i.y);		
	
				default  : G[c[i].i.x][c[i].i.y] = c[i].v;
			} 
			
		System.out.println("Borrant columnes 0...");			
		for (int i=0;i<SC.length;i++)
			if (SC[i] == 0) p.BorraColumna(i);
			
		System.out.println("Borrant files 0...");						
		for (int i=0;i<SR.length;i++)
			if (SR[i] == 0) p.BorraFila(i);
			
			
		while (!resolved)
		{
			boolean Err;
			Random  rnd = new Random();		
			byte    o;

			for (int n=0;n<v.length;n++) // recorrem tots els vaixells
			{
				for (int m=0;m<mc*mr && !v[n].fixat;m++) // intentem a totes les posicions existents shufflejades(p.I)
				{			
					Err = false;			
				
					if (p.I[m].x == Indexs.NV) continue; // si el valor esta borrat, el saltem
				
					o = v[n].l==k.SUB ? o = k._i_ : rnd.nextBoolean() ? k._h_ : k._v_ ; // escollim una orientacio inical aleatoria
																						
					Err = IntentaPosar(v,n,p.I[m],o);
					if (Err) Err=IntentaPosar(v,n,p.I[m],k.N(o));

					if (!Err) { // es valida, el fixem, el dibuixem, i borrem lindex
					
					v[n].fixat = true;
					v[n].toGrid(G);						
					p.Borra(m);
					}
				}
			}
			resolved = true;			
		}		
			
		// ComprobaSolucio;
						
		System.out.println("SoluciÃ³ : ");
		System.out.println(toString());*/
		
		String s = "";
		
		for (int n=0;n<v.length;n++)
		for (int m=0;m<v.length;m++)
		{
			if (v[n].a_Area(v[m].Aigues()))
				 s += "#"+n+ " a aigues de #"+m+"\n";
			else s += "#"+n+ " no toca aigues de #"+m+"\n";											
		}
		
		System.out.printf(s);
			
//		return ret;
		return true;
	}
	
	public boolean IntentaPosar(Vaixell[] v,int n,Index i,byte o){ // retorna true si hi ha error
		return true;
				
	}
	
	public void Comproba(){
		String s="";
		
		s += "mc = " + mc + "; mr = " + mr + "\n";
		
		for (int i=0;i<v.length;i++)
		s += "vaixell["+i+"] : i=("+v[i].i.x +","+v[i].i.y +"); l="+(int)v[i].l+"; o="+(int)v[i].o + "; fixat=" + v[i].fixat+"\n";
		
		s += "\n";
		for (int i=0;i<c.length;i++)
		s += "cella[" +i+ "] : i=("+c[i].i.x+","+c[i].i.y+"); v="+k.r[c[i].v] + "\n";
		
		
		
		s += "\n";
		
		System.out.println(s);
	}
	
	public String toString(){
		char G[][] = new char[mc][mr];
		String ret = "";
						
		if (resolved) {
			for (int j=0;j<mr;j++)
			for (int i=0;i<mc;i++)
				G[i][j] = k.r[k.A_];					
		
			for (int n=0;n<v.length;n++)				
				v[n].toGrid(G);	
		}
		else {
			for (int j=0;j<mr;j++)
			for (int i=0;i<mc;i++)
				G[i][j] = k.r[k.x_];

			for (int n=0;n<c.length;n++)
				G[c[n].i.x][c[n].i.y] = k.r[c[n].v];
		}

		for (int j=0;j<mr;j++)
		{
			for (int i=0;i<mc;i++)
				ret += G[i][j] + "|";
			
			ret += " " + SC[j] + "\n";
			
			for (int i=0;i<mc;i++)
			ret += "--";
			
			ret += "\n";
			
		}
				
		for (int i=0;i<mc;i++)
			ret += SR[i] + " ";
			
		ret += "\n";

		return ret;
	}

}
