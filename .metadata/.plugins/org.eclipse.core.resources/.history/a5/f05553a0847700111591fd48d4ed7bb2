package shipmodel;

import java.util.Arrays;

import comu.K;


public class Flota {
	
	byte C,R;
	public byte[] SR;
	public byte[] SC;
	byte[] Ls;	
			  		
	Vaixell[] TP;
	Vaixell[][] S;

	
	public Flota(int c,int r,byte[] l){	
		C=(byte)c;
		R=(byte)r;
		
		SR = new byte[C];
		SC = new byte[R];			
		
		Ls = l.clone();
	}	
	
	public void CombinacionsPosibles(){
					
		CreaTaulaPosicions();
		InclouPosicionsxSumes(); 	
		
		S = new Vaixell[0][0];
		
		BuscaCombinacions(new Vaixell[0]);				
	}
	
	public boolean CheckejaSumes(Vaixell[] V){
		
		byte[] SRs,SCs;
		byte i,j;
		boolean r = true;		
		
		SRs = new byte[C];
		SCs = new byte[R];
	
		for (Vaixell v:V)
			for (i=v.r().x;i<=v.rf().x;i++)		
			for (j=v.r().y;j<=v.rf().y;j++)		
			{
				SRs[i]++;
				SCs[j]++;
			}					
		
		for (i=0;i<C;i++)
		r&=SRs[i]<=SR[i];
		
		for (j=0;j<R;j++)
		r&=SCs[j]<=SC[j];
		
		return r;
	}
	
	public boolean CheckejaChocs(Vaixell[] V){
		boolean r = false;
		
		for (Vaixell v:V)
		for (Vaixell l:V)
			if (v!=l) r|=v.choca(l);		
		
		return r;	
	}
	
	
	public boolean CheckCombinacio(Vaixell[] V){
		return CheckejaSumes(V)&&CheckejaChocs(V);
	}
	
	public void BuscaCombinacions(Vaixell[] check){
	
		int idx = check.length;
	
		check = Arrays.copyOf(check,check.length+1);
		
		System.out.print(".");
		
		for (Posicio p:TP[idx].ps.P) {
		
			System.out.println(Ls[idx] + " : " + p.toString());
				
			check[idx] = new Vaixell(Ls[idx],p);
			
			if (CheckCombinacio(check))	{
				if (check.length==Ls.length) {
					if (SolucioNoInclosa(check)) {
									
						S = Arrays.copyOf(S,S.length+1);
									
						S[S.length-1] = new Vaixell[check.length];
										
						for (int n=0;n<check.length;n++)
							S[S.length-1][n] = new Vaixell(check[n]);					
					}
				}
				else
				BuscaCombinacions(check);				
			}
		}
	}		
	
	public boolean SolucioNoInclosa(Vaixell[] c){
		
		int L = 0;
		
		for (Vaixell v:c)
			L = v.L>L?v.L:L;
				
		Posicions[] pc = new Posicions[L];
		
		for (int n=0;n<pc.length;n++) pc[n] = new Posicions();
		
		for (Vaixell v:c)
			pc[v.L-1].add(v.ps.r());
		
		for (Vaixell[] s:S){			
				
			Posicions[] ps = new Posicions[L];
			
			for (int n=0;n<ps.length;n++) ps[n] = new Posicions();
		
			for (Vaixell v:s)
				ps[v.L-1].add(v.ps.P);
				
			if (IgualCombinacio(pc,ps)) return false;
		}
				
		return true;
	}
	
	public boolean IgualCombinacio(Posicions[] p1,Posicions[] p2){
		boolean r = true;
		
		for (int n=p1.length;n!=0;n--)
			r &= p1[n-1].mateixoselements(p2[n-1]); 		
		
		return r;
	}
	
	
	public void CreaTaulaPosicions(){
	
		int mL=1;
		
		for (byte b:Ls) mL = mL>b?mL:b;
		
		TP = new Vaixell[mL];
		
		for (byte n=0;n<mL;n++)
		TP[n] = new Vaixell(n);
	}
	
	public void InclouPosicionsxSumes(){
	
		byte i,j,k,m;
		boolean z;
	
		for (j=0;j<R;j++)
		for (i=0;i<C;i++)
		for (Vaixell v:TP)
		{
			if (v.L<=SC[j]&&i+v.L-1<C)
			{
				z=false;
				for (k=i;k<i+v.L;k++) z|=SR[k]==0;
				
				if (!z)
				v.ps.add(i,j,K.HOR);
			}
			
			if (v.L<=SR[i]&&j+v.L-1<R) 
			{
				z=false;
				for (m=j;m<j+v.L;m++) z|=SC[m]==0;
				
				if (!z)
				v.ps.add(i,j,K.VER);
			}								
		}							
	}		
	
	public String toString(){
		int i=0;
		String r="";
		
		if (S==null) return "No s\'ha creat cap flota";
	
		for (Vaixell[] s:S)
		{
			r+="\nSoluciÃ³ " + (++i);
			for (Vaixell v:s) r+=v.toString();
		}
		
		return r;
		
		
	}
}
