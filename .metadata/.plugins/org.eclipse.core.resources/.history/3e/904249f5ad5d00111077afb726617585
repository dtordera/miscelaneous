package meves.apps.logic;

import meves.apps.logic.puzzle.FactoriaPuzzle;
import meves.apps.logic.puzzle.K;
import meves.apps.logic.puzzle.Puzzle;
import android.app.Activity;
import android.content.Context;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.view.Display;
import android.view.MotionEvent;
import android.view.ScaleGestureDetector;
import android.view.View;
import android.view.WindowManager;
import android.widget.Toast;

public class BSViewActivity extends Activity {

	@Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        
        BSView B = new BSView(this,new FactoriaPuzzle(10,10,new int[]{4,3,3,2,2,2,1,1,1,1},true).Genera());
                        
        setContentView(B);
    }
    
    public class BSView extends View {

    	Puzzle P;
    	Bitmap[] bmps;
    	Bitmap 	 PuzzleBitmap;
    	Canvas   PuzzleCanvas;
    	Paint mPaint,ind;
    	Context ctx;    	
    	
    	int textsizeX,textsizeY;
    	int  maxcellSize,
    		 mincellSize,
    		 currentcellSize;
    	int screenHeight,screenWidth;
    	int PuzzleX;
    	
    	int idX,idY;
    	int cdX,cdY;   	    	

    	public BSView(Context context,Puzzle p) {
    		super(context);
    		
    		ctx = context;
    		P = p;

    		InitView();				
    		InitGame();
    	}
	
    	public void InitView(){
    	
    		Rect TextSize = new Rect();    	
    		Resources r = this.getContext().getResources();		    		
    		    	    		    	
    		mPaint = new Paint();
    		mPaint.setColor(Color.WHITE);
    		mPaint.setAlpha(0xaa);
    		mPaint.setAntiAlias(true);
    		mPaint.setTextSize(24);
    		
    		ind = new Paint();    		
    		ind.setColor(0x000044);
    		ind.setAlpha(0xff);
    		ind.setAntiAlias(true);     		
    		    		
    		mPaint.getTextBounds("0",0,1,TextSize);    		
    		
    		textsizeX = TextSize.right - TextSize.left;
    		textsizeY = TextSize.bottom - TextSize.top;    		    		    		    		
    		
    		WindowManager wm = (WindowManager) ctx.getSystemService(Context.WINDOW_SERVICE);
    		Display display = wm.getDefaultDisplay();    		    		
    		
    		screenHeight = display.getHeight();
    		screenWidth  = display.getWidth();    		    		
    		   		    		
    		mincellSize = (screenHeight - textsizeY - 2) / P.R;
    		maxcellSize = (screenHeight - textsizeY - 2) / 5;    		    		
    		
    		currentcellSize = maxcellSize;
    		
    		idX = 0;
    		cdX = 5;
    		
    		idY = 0;
    		cdY = 5;
    		    		    		    	    		    		    		    		    		
    		bmps = new Bitmap[8];        
                        
    		loadTile(K.A,r.getDrawable(R.drawable.pa));
    		loadTile(K.M,r.getDrawable(R.drawable.pp));
    		loadTile(K.X,r.getDrawable(R.drawable.px));
    		loadTile(K.N,r.getDrawable(R.drawable.pn));
    		loadTile(K.S,r.getDrawable(R.drawable.ps));
    		loadTile(K.E,r.getDrawable(R.drawable.pe));
    		loadTile(K.O,r.getDrawable(R.drawable.po));
    		loadTile(K.B,r.getDrawable(R.drawable.pb));    		
    		    		
    		setFocusable(true);    		
    		
    		mScaleDetector = new ScaleGestureDetector(ctx, new ScaleListener());    		
    	}
	
    	public void InitGame(){
    		long t = System.currentTimeMillis();
    		
    		Toast.makeText(ctx,"Puzzle created ("+(System.currentTimeMillis()-t) + "ms)",Toast.LENGTH_SHORT).show();
    		
    		PuzzleBitmap = Bitmap.createBitmap(mincellSize*P.C+textsizeX*2,screenHeight,Bitmap.Config.ARGB_8888);
    		PuzzleCanvas = new Canvas(PuzzleBitmap);
    		
    		PuzzleX = (screenWidth - PuzzleCanvas.getWidth())/2;    		    		    		
    		
    		drawPuzzle();
    	}
	
    	public void loadTile(byte key, Drawable tile) {
    		Bitmap bitmap = Bitmap.createBitmap(mincellSize,mincellSize,Bitmap.Config.ARGB_8888);
    		Canvas canvas = new Canvas(bitmap);
    		tile.setBounds(0,0,mincellSize,mincellSize);
    		tile.draw(canvas);
    		
    		bmps[key] = bitmap;
    	}	
		
    	public void drawPuzzle(){
    	
    		Paint l = new Paint();
    		
    		l.setColor(0x000000);
    		l.setAlpha(0xff);
    	    		
    		PuzzleCanvas.drawRect(new Rect(0,0,PuzzleCanvas.getWidth(),PuzzleCanvas.getHeight()),l);    		
    	
    		int i,j;
    		
    		for (j=idY;j<idY+cdY;j++)
    		for (i=idX;i<idX+cdX;i++)
    			if (P.v(i,j) > -1)
    				PuzzleCanvas.drawBitmap(bmps[P.v(i,j)],(i-idX)*currentcellSize,(j-idY)*currentcellSize,mPaint);
    			else
    				PuzzleCanvas.drawRect(new Rect((i-idX)*currentcellSize,(j-idY)*currentcellSize,(i-idX+1)*currentcellSize - 1,(j-idY+1)*currentcellSize - 1),ind);    		
    				    			
    		for (i=idX;i<idX+cdX;i++)
    			PuzzleCanvas.drawText(""+P.SR[i],(i-idX)*currentcellSize+currentcellSize/2-textsizeX/2,screenHeight,mPaint);
    			
    		for (j=idY;j<idY+cdY;j++)
    			PuzzleCanvas.drawText(""+P.SC[j],currentcellSize*cdX+5,(j-idY+1)*currentcellSize-currentcellSize/2+textsizeY/2, mPaint);
    	}
	
    	@Override protected void onDraw(Canvas canvas){    	
    		super .onDraw(canvas);
    		canvas.drawBitmap(PuzzleBitmap,PuzzleX,0,mPaint);    		    		
    	}    			
    	    	   	
    	private static final int INVALID_POINTER_ID = -1;

    	private float mPosX;
    	private float mPosY;

    	private float mLastTouchX;
    	private float mLastTouchY;

    	private int mActivePointerId = INVALID_POINTER_ID;


    	@Override
    	public boolean onTouchEvent(MotionEvent ev) {
    		
    		mScaleDetector.onTouchEvent(ev);    		
    		
    		switch (ev.getAction() & MotionEvent.ACTION_MASK) {
    		
    			case MotionEvent.ACTION_DOWN: {
    				final float x = ev.getX();
    				final float y = ev.getY();
    				
    				if (x > screenWidth - 200){
    					Toast.makeText(ctx,"zoom out",Toast.LENGTH_LONG).show();
    				}
    				else
    				{
    				
    				mPosX = 0;
    				mPosY = 0;
    				mLastTouchX = x;
    				mLastTouchY = y;
    				
    				mActivePointerId = ev.getPointerId(0);
    				break;
    				}
    			}

    			case MotionEvent.ACTION_MOVE: {

    				// Only move if the ScaleGestureDetector isn't processing a gesture.
    				
//    				if (!mScaleDetector.isInProgress()) {
    				
    					final int pointerIndex = ev.findPointerIndex(mActivePointerId);
    				
    					final float x = ev.getX(pointerIndex);
    					final float y = ev.getY(pointerIndex);
    				
    					final float dx = x - mLastTouchX;
    					final float dy = y - mLastTouchY;
    					
    					mPosX+=dx;
    					mPosY+=dy;
    					
    					if (mPosX > currentcellSize) {
    						mPosX = 0;
    						if (idX > 0) idX--;    					
    					}
    					
    					if (mPosX < -currentcellSize) {
    						mPosX = 0;
    						if (idX + cdX< P.C-1) idX++;
    					}    		
    					
    					if (mPosY > currentcellSize) {
    						mPosY = 0;
    						
    						if (idY > 0) idY--;    					    						    						
    					}			
    					
    					if (mPosY < -currentcellSize) {
    						mPosY = 0;
    						if (idY + cdY < P.R-1) idY++;
    					}    		    					
    					    				    					    					
    					drawPuzzle();
    					invalidate();

    					mLastTouchX = x;
    					mLastTouchY = y;
//    				}
    			
    					break;
    			}

    			case MotionEvent.ACTION_UP: {
    				mActivePointerId = INVALID_POINTER_ID;
    				break;
    			}

    			case MotionEvent.ACTION_CANCEL: {
    				mActivePointerId = INVALID_POINTER_ID;
    				break;
    			}

    			case MotionEvent.ACTION_POINTER_UP: {
    				final int pointerIndex = (ev.getAction() & MotionEvent.ACTION_POINTER_INDEX_MASK) 
    					>> MotionEvent.ACTION_POINTER_INDEX_SHIFT;
    				final int pointerId = ev.getPointerId(pointerIndex);
    				if (pointerId == mActivePointerId) {
    					// This was our active pointer going up. Choose a new
    					// active pointer and adjust accordingly.
    					final int newPointerIndex = pointerIndex == 0 ? 1 : 0;
    					mLastTouchX = ev.getX(newPointerIndex);
    					mLastTouchY = ev.getY(newPointerIndex);
    					mActivePointerId = ev.getPointerId(newPointerIndex);                
    				}
    				break;
    			}
    		}
    		return true;
    	}
    	
/*    	private ScaleGestureDetector mScaleDetector;

    	private class ScaleListener extends ScaleGestureDetector.SimpleOnScaleGestureListener {
        @Override
        public boolean onScale(ScaleGestureDetector detector) {
             
        	int delta = detector.getCurrentSpan() < detector.getPreviousSpan()?-1:1;
        	        	
            if (delta > 0) 
            {
            	if (cdY > 5) 
            	{
            		cdY--;
            		cdX--;
            		
            		if (idY + cdY < P.R - 1) idY++;
            		if (idX + cdX < P.C - 1) idX++;
            	
            		currentcellSize = (screenHeight - textsizeY) / cdY;            	
            	}           	            	
            }
            else            
            if (delta < 0)
            {
            	if (cdY<P.R)
            	{
            		cdY++;
            		cdX++;
            		
            		if (idY > 1) idY--;            		
            		if (idX > 1) idX--;
            		
            		currentcellSize = (screenHeight - textsizeY) / cdY;            	            		
            	}
            }

            drawPuzzle();
            invalidate();
            return true;
        }
    }*/
    	
    }
    
    
    
}