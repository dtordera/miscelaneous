package meves.apps.logic;

import meves.apps.logic.puzzle.FactoriaPuzzle;
import meves.apps.logic.puzzle.K;
import meves.apps.logic.puzzle.Puzzle;
import android.app.Activity;
import android.content.Context;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Point;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.view.Display;
import android.view.View;
import android.view.WindowManager;
import android.widget.Toast;

public class BSViewActivity extends Activity {

	@Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        
        BSView B = new BSView(this);
                
        
        setContentView(B);
    }
    
    public class BSView extends View {

    	Puzzle P;
    	Bitmap[] bmps;
    	Bitmap 	 PuzzleBitmap;
    	Canvas   PuzzleCanvas;
    	Paint mPaint,ind;
    	Context ctx;
    	
    	int INITIAL_PR = 10;
    	
    	byte textsizeX,textsizeY;
    	byte maxcellSize,
    		 mincellSize,
    		 currentcellSize;
    	byte screenHeight,screenWidth;
    	byte PuzzleX;
    	

    	public BSView(Context context) {
    		super(context);
    		
    		ctx = context;

    		InitView();				
    		InitGame();
    	}
	
    	public void InitView(){
    	
    		Rect TextSize = new Rect();    	
    		Resources r = this.getContext().getResources();		    		
    		    	
    		System.out.println("1");
    		    	
    		mPaint = new Paint();
    		mPaint.setColor(Color.WHITE);
    		mPaint.setAlpha(0xaa);
    		mPaint.setAntiAlias(true);
    		mPaint.setTextSize(24);
    		
    		ind = new Paint();    		
    		ind.setColor(0x000044);
    		ind.setAlpha(0xff);
    		ind.setAntiAlias(true); 
    		
    		System.out.println("2");    		   		    		    	        		    		    		
    		    		
    		mPaint.getTextBounds("0",0,1,TextSize);    		
    		
    		textsizeX = (byte)(TextSize.right - TextSize.left);
    		textsizeY = (byte)(TextSize.bottom - TextSize.top);    		    		    		    		
    		
    		WindowManager wm = (WindowManager) ctx.getSystemService(Context.WINDOW_SERVICE);
    		Display display = wm.getDefaultDisplay();    		    		
    		
    		screenHeight = (byte)display.getHeight();
    		screenWidth  = (byte)display.getWidth();    		    		
    		    		
    		mincellSize = 40;
    		currentcellSize = mincellSize;
    		maxcellSize = (byte)((screenHeight - textsizeY) / 5);    		    		
    		    		    		    	    		    		    		    		    		
    		bmps = new Bitmap[8];        
                        
    		loadTile(K.A,r.getDrawable(R.drawable.pa));
    		loadTile(K.M,r.getDrawable(R.drawable.pp));
    		loadTile(K.X,r.getDrawable(R.drawable.px));
    		loadTile(K.N,r.getDrawable(R.drawable.pn));
    		loadTile(K.S,r.getDrawable(R.drawable.ps));
    		loadTile(K.E,r.getDrawable(R.drawable.pe));
    		loadTile(K.O,r.getDrawable(R.drawable.po));
    		loadTile(K.B,r.getDrawable(R.drawable.pb));    		
    		
    		System.out.println("6");    		
    		
    		setFocusable(true);    		
    	}
	
    	public void InitGame(){
    		long t = System.currentTimeMillis();
    		P = new FactoriaPuzzle(10,10,new int[]{4,3,3,2,2,2,1,1,1,1},true).Genera();                	
    		
    		Toast.makeText(ctx,"Puzzle created ("+(System.currentTimeMillis()-t) + "ms)",Toast.LENGTH_SHORT).show();
    		
    		PuzzleBitmap = Bitmap.createBitmap(mincellSize*P.C,mincellSize*P.R,Bitmap.Config.ARGB_8888);
    		PuzzleCanvas = new Canvas(PuzzleBitmap);
    		
    		PuzzleX = (byte)((screenWidth - PuzzleCanvas.getWidth())/2);    		    		    		
    		
    		drawPuzzle();
    	}
	
    	public void loadTile(byte key, Drawable tile) {
    		Bitmap bitmap = Bitmap.createBitmap(mincellSize,mincellSize,Bitmap.Config.ARGB_8888);
    		Canvas canvas = new Canvas(bitmap);
    		tile.setBounds(0,0,mincellSize,mincellSize);
    		tile.draw(canvas);
    		
    		bmps[key] = bitmap;
    	}	
		
    	public void drawPuzzle(){
    		byte i,j;
    		
    		for (j=0;j<P.R;j++)
    		for (i=0;i<P.C;i++)
    			if (P.v(i,j) > -1)
    				PuzzleCanvas.drawBitmap(bmps[P.v(i,j)],i*currentcellSize,j*currentcellSize,mPaint);
    			else
    				PuzzleCanvas.drawRect(new Rect(i*currentcellSize,j*currentcellSize,(i+1)*currentcellSize - 1,(j+1)*currentcellSize - 1),ind);    		
    				    			
    		for (i=0;i<P.C;i++)
    			PuzzleCanvas.drawText(""+P.SR[i],i*currentcellSize,screenHeight - textsizeY - 2,mPaint);
    			
    		for (j=0;j<P.C;j++)
    			PuzzleCanvas.drawText(""+P.SC[j],currentcellSize*P.C+textsizeX,j*currentcellSize - textsizeY /2, mPaint);
    	}
	
    	public void onDraw(Canvas canvas){
    		canvas.drawBitmap(PuzzleBitmap,PuzzleX,0,mPaint);    		    		
    	}    			
    }
}